{"ast":null,"code":"import { getToken } from \"./userSession\";\nconst baseURL = process.env.REACT_APP_SERVER_URL;\nexport const fetchCharacters = async (page = 1) => {\n  const token = getToken();\n  const characterResponse = await fetch(`${baseURL}/characters/?page=${page}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return characterResponse.json();\n};\nexport const fetchFavorites = async () => {\n  const token = getToken();\n  const favoritesResponse = await fetch(`${baseURL}/favorites`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await favoritesResponse.json();\n};\nexport const login = async ({\n  username,\n  password\n}) => {\n  const response = await fetch(`${baseURL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Invalid credentials\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["getToken","baseURL","process","env","REACT_APP_SERVER_URL","fetchCharacters","page","token","characterResponse","fetch","headers","Authorization","json","fetchFavorites","favoritesResponse","login","username","password","response","method","body","JSON","stringify","ok","Error"],"sources":["/Users/lisasapi/Desktop/rick-and-morty/frontend/src/utils/api.js"],"sourcesContent":["import { getToken } from \"./userSession\";\n\nconst baseURL = process.env.REACT_APP_SERVER_URL;\n\nexport const fetchCharacters = async (page = 1) => {\n  const token = getToken();\n  const characterResponse = await fetch(`${baseURL}/characters/?page=${page}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  return characterResponse.json();\n};\n\nexport const fetchFavorites = async () => {\n  const token = getToken();\n  const favoritesResponse = await fetch(`${baseURL}/favorites`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  return await favoritesResponse.json();\n};\n\nexport const login = async ({ username, password }) => {\n  const response = await fetch(`${baseURL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ username, password }),\n  });\n  if (!response.ok) {\n    throw new Error(\"Invalid credentials\");\n  }\n\n  return response.json();\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AAExC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAEhD,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,KAAK;EACjD,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,MAAMQ,iBAAiB,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,qBAAqBK,IAAI,EAAE,EAAE;IAC3EI,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,OAAOC,iBAAiB,CAACI,IAAI,CAAC,CAAC;AACjC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMN,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,MAAMc,iBAAiB,GAAG,MAAML,KAAK,CAAC,GAAGR,OAAO,YAAY,EAAE;IAC5DS,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,OAAO,MAAMO,iBAAiB,CAACF,IAAI,CAAC,CAAC;AACvC,CAAC;AAED,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACrD,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAC,GAAGR,OAAO,QAAQ,EAAE;IAC/CkB,MAAM,EAAE,MAAM;IACdT,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,OAAON,QAAQ,CAACN,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}